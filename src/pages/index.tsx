import type { NextPage } from 'next';
import Head from 'next/head';
import { ApolloClient, InMemoryCache, gql } from '@apollo/client';
import { Header } from '../containers/Header/Header';
import React, { MouseEventHandler, useState } from 'react';
import { Cards } from '../containers/Cards/Cards';
import { SideBar } from '../containers/SideBar/SideBar';
import { Pagination } from '../components/Pagination/Pagination';
import { ACTIVE_PAGE } from '../utils/constants';
import { filterArray } from '../utils/filterArray';
import Launche from '../models/Launche';
import { arrayDivision } from '../utils/arrayDivision';

const Home: NextPage<{ launches: Launche[] }> = ({ launches }) => {
  const [openSideBar, setOpenSideBar] = useState<boolean>(false);
  const [activePage, setActivePage] = useState<number>(ACTIVE_PAGE);
  const [favoriteList, setFavoriteList] = useState<Launche[]>([]);
  const [searchLaunches, setSearchLaunches] = useState<string>('');

  const filteredLaunches = filterArray(launches);

  const sliceLaunches = arrayDivision(filteredLaunches, activePage);

  const handleAddFavorite = (launchceCard: Launche) => {
    !favoriteList.includes(launchceCard) &&
      setFavoriteList([...favoriteList, launchceCard]);
  };

  const handleRemoveFavorite = (launchceId: number) => {
    setFavoriteList(favoriteList.filter((list) => list.id !== launchceId));
  };

  const handleSearchLaunches = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setSearchLaunches(value);
  };

  const searchingLaunches = filteredLaunches.filter((launches: Launche) => {
    return launches.mission_name.toLowerCase().includes(searchLaunches);
  });

  const renderLaunches =
    searchLaunches.length >= 3 ? searchingLaunches : sliceLaunches;

  return (
    <>
      <Head>
        <title>SpaceX</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className='app'>
        <div className='container'>
          <SideBar
            isOpen={openSideBar}
            favorites={favoriteList}
            removeFavorite={handleRemoveFavorite}
          />
          <Header
            setOpenBar={() => setOpenSideBar(!openSideBar)}
            activeButton={openSideBar}
            onSearch={(e: React.ChangeEvent<HTMLInputElement>) =>
              handleSearchLaunches(e)
            }
          />
          <Cards
            launchces={renderLaunches}
            addToList={(e: Launche) => handleAddFavorite(e)}
          />
          {searchLaunches.length >= 3 ? null : (
            <Pagination
              total={filteredLaunches.length}
              itemsPerPage={6}
              handleClick={(page) => setActivePage(page)}
            />
          )}
        </div>
      </main>

      <footer></footer>
    </>
  );
};

export async function getStaticProps() {
  const client = new ApolloClient({
    uri: 'https://api.spacex.land/graphql/',
    cache: new InMemoryCache(),
  });

  const { data } = await client.query({
    query: gql`
      query GetLaunches {
        launches(limit: 30) {
          id
          launch_date_local
          mission_name
          rocket {
            rocket {
              description
            }
          }
          ships {
            image
            name
          }
        }
      }
    `,
  });

  return {
    props: {
      launches: data.launches as Launche[],
    },
  };
}

export default Home;
